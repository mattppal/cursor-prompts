00;00;00;00 - 00;00;15;24
Unknown
Hey, it's Matt with Red bull here. And today we're talking about persistent storage in your rebels. We're gonna talk about what persistent storage is. We're going to talk about why it's important. And we're going to talk about the different types of options you have for storing your data on Replit. We're going to get right into it. First, why do you need to persist data?

00;00;15;24 - 00;00;35;14
Unknown
Well, if you've tried to build, apps on other platforms, maybe you've tried to build apps on Replit and you just didn't know that we had these options. You might notice it's really hard to store data. And, you know, one of the reasons the Replit agent, you know, our recent sort of agenda release has been so powerful is because it has options for storing data that persist across sessions, right?

00;00;35;14 - 00;00;50;08
Unknown
If you have a to do list and you refresh the page and all your tattoos disappear, that's not a very useful To-Do list, right? So there needs to be something on the back end where you can store data and store user sessions and store user information. Maybe you want to create a SAS website. Maybe you want to create a product.

00;00;50;10 - 00;01;08;15
Unknown
You need to be able to store your user data. You need to be able to store the, information about that user and all the actions that they take, and then surface those so that people have enjoyable experience and they can go away and come back to the application. Now, by default, the file tree that you see when you go into a ripple, when you go into the workspace, right.

00;01;08;22 - 00;01;31;02
Unknown
That is not persistent. If the repo restarts, we're going to just roll back to the existing files. You can think about a ripple like a snapshot, like a deployment of a ripple is a snapshot of that ripple. So when you click deploy we take the existing file structure and deploy it. If the user does stuff in that ripple alone, right, that data is not going to be saved.

00;01;31;02 - 00;01;47;01
Unknown
So you have to use some sort of persistent storage to make sure that you're storing user data. And we have three options for you to do that. And there are different types of storage. I used to work in data. I used to be a data engineer. So we'll talk about each of these. But I'm going to break it down into really simple terms that anybody can understand.

00;01;47;03 - 00;02;00;07
Unknown
Maybe you know more about these than I do. Awesome. This will be mostly informative. If not, hopefully I can help you understand the types of storage you have to choose from on Replit. Our first type of storage is Postgres. So Postgres database. What is Postgres? Put.

00;02;00;07 - 00;02;19;08
Unknown
This is a relational database, which means it stores data in tables. If you know nothing about a database, think about it like a series of Google spreadsheets that kind of connect to each other through IDs, through primary keys. And if you want to learn more about relational databases, there's a lot about that online. So I won't go into the details of what a relational database is.

00;02;19;09 - 00;02;30;24
Unknown
I'll just mention that we have embedded Postgres in Replit. So in one click you can have a Postgres database that you can easily write and read from. And if you're using the Replit agent it's aware of this database.

00;02;30;24 - 00;02;42;28
Unknown
It can build with Postgres databases. It's really quite seamless. So if you're looking for a relational database, most people, if they're building a production application, are, give replit Postgres a shot.

00;02;42;28 - 00;03;03;14
Unknown
Some facts about our Postgres databases. Now they're serverless. They're running all the time. It's actually backed by a company called neon, which makes really great databases. But they can be accessed anywhere. That means if you click New database on Replit, you'll get a connection string and some credentials. You can actually access that database from your laptop. You could access it from a database client.

00;03;03;15 - 00;03;24;12
Unknown
You could build other things that point out that database using those connection credentials. You just have a database that's accessible anywhere. So I want to emphasize that because most people might assume the database is constrained to that Repl environment. It's not. You can make reads and writes anywhere you want to with that connection string. That also means that sensitive information.

00;03;24;12 - 00;03;30;29
Unknown
So don't go like giving out your connection string to people. But I want to emphasize the database is available anywhere.

00;03;30;29 - 00;03;43;18
Unknown
second point, the data is persistent. Which is exactly what I've been describing. Right. If a user navigates away, your database is still going to have that data. You can restart the ripple as many times as you want as long as it's queuing off of that database.

00;03;43;26 - 00;03;47;10
Unknown
You're going to be able to persist data and create really great user experiences.

00;03;47;10 - 00;03;47;25
Unknown
Next.

00;03;47;25 - 00;04;04;01
Unknown
Each rebel gets its own database and you can access, as I mentioned, databases cross rebel using that connection string. But by default if you click new database inside of rebel, it's going to create a new database and you're not creating a database at the account level, it's at the rep level.

00;04;04;01 - 00;04;07;26
Unknown
again, if you want to use the same database across rebels, you absolutely can do that.

00;04;07;26 - 00;04;11;29
Unknown
You just need to make sure you get the correct information and update your secrets accordingly.

00;04;11;29 - 00;04;19;17
Unknown
Again, you can get started in literally a click there, backed by our friends at neon, who make really great database products. Excellent work.

00;04;19;17 - 00;04;21;06
Unknown
They're great for production data.

00;04;21;06 - 00;04;26;12
Unknown
And each database comes with ten gigs of storage, which should be more than enough to get you off the ground running.

00;04;26;12 - 00;04;43;00
Unknown
The next type of storage on Replit is key value databases. Also a database, slightly different, key value databases, I think conceptually make the most sense as thinking about them like dictionaries. And when I say dictionary, I mean like a Python or a Json object, right.

00;04;43;02 - 00;05;03;00
Unknown
There are keys and there are values. So, when you call this database, you're basically just supplying a key and the database will return a value. So, this is much better for very simple tasks or very simple. You know, architectures where you're just saying, oh, I need to store this unique key, for, for this information.

00;05;03;00 - 00;05;22;00
Unknown
And there's a value associated with that. And what I need to grab it. All I have to do is ping this database and it's available instantly. The really great thing about just how simple this is, is you can implement it just like you would a dictionary in Python. Which makes it feel like you're not doing any extra steps to get this persistent data.

00;05;22;00 - 00;05;25;16
Unknown
It's actually a really great unlock for more simple applications.

00;05;25;16 - 00;05;43;21
Unknown
The sun's a bit different where key value databases are on a per rebel basis, so you can't access them. Cross rebel. Additionally, you get about 50 megs of storage less than a Postgres database, so it's a different type of solution. Getting started with key value databases. Again, you create it in one click.

00;05;43;21 - 00;05;48;10
Unknown
We have SDK for Python in node, and there are ways of accessing these with other frameworks.

00;05;48;10 - 00;05;53;19
Unknown
These are backed by Replit. So they're stored on our servers. You don't have to worry about them going down.

00;05;53;19 - 00;06;03;01
Unknown
They're also great with production data. And as I mentioned they come with 50 megs of storage. So key value databases are much, easier, maybe more low lift.

00;06;03;04 - 00;06;05;11
Unknown
Approach to storing and accessing data.

00;06;05;11 - 00;06;29;05
Unknown
Finally we have object storage. Now object storage. The parallel I'll draw here is like AWS or Google Cloud. As a matter of fact, our object storage is backed by Google Cloud. Like what you write is just going through a proxy layer to Google Cloud Storage. And what that means for object storage, if you're unfamiliar, think about it like a directory on your computer, but in the cloud so you can add documents, you can add photos, you can have videos.

00;06;29;07 - 00;06;47;11
Unknown
You can just upload this thing to to the cloud. It's pretty great. And really you can upload an unlimited amount of data because we're just going to build through the object storage that you use at the Google Cloud rate or an adjusted rate. So in that sense, object storage is super flexible. It almost acts like a directory.

00;06;47;11 - 00;07;05;27
Unknown
And if you have an application where you want you to upload PDFs or upload documents and then like be able to access those, you know, like I think about building like conversion tools where I want to be able to like upload GIFs and then convert them. But maybe I want to re access those Jeffs, or I want them to be stored temporarily somewhere, and I don't want them to just go in the Repl.

00;07;05;29 - 00;07;08;15
Unknown
You can use object storage for that is a perfect solution.

00;07;08;15 - 00;07;13;24
Unknown
So for object storage you're creating a new, like virtual, file system or what we call a bucket.

00;07;13;24 - 00;07;19;18
Unknown
Her Repl. So we're not accessing these cross rubble. And getting started is really simple.

00;07;19;18 - 00;07;25;20
Unknown
You can create them in one click. They're backed by Google Cloud. We have JavaScript in Python SDK s.

00;07;25;22 - 00;08;00;15
Unknown
And theoretically you get unlimited storage. Upload stuff to your heart's content. Just be aware that you will incur costs if you drop like a terabyte of data in your object storage. One more thing to note on the object storage. This is something I recently learned because our object storage is backed by Google Cloud. If there are operations that are outside of our Python and JavaScript SDK, for example, continuous uploading or like chunked file uploading, like some more advanced interactions with object storage, you can actually directly leverage the Google Cloud SDK.

00;08;00;16 - 00;08;22;29
Unknown
So for if for some reason you don't want to use our code, you can just use any code that's in the Google Cloud Docs. And it will work. We have instructions both in the actual object storage pane and in our documentation on how to authenticate with Google Cloud. But what you're doing is basically bypassing Replit and using the Repl to authenticate directly to Google Cloud for that bucket.

00;08;23;01 - 00;08;34;25
Unknown
This is a bit advanced, so if you don't understand what I'm saying, all I'm trying to communicate is if you don't want to use Replit TestCase, you can just directly use the Google Cloud SDK, which expose more advanced functionality.

00;08;34;25 - 00;08;56;19
Unknown
So that's been our three different types of persistent storage on Replit. Again, we have Postgres databases which are great for production applications or relational data, if you're storing them. Otherwise we have key value databases which are more simple, data structure kind of akin to a dictionary or a Json blob. And finally we have our.

00;08;56;19 - 00;09;18;13
Unknown
Storage, which is great for uploading different types of files, maybe uploading some compressed data, csvs parquet files, etc. but also audio, image, video, PDF, etc.. So from these options, hopefully you understand right within this Repl you have access to any type of data storage you need. You don't have to go to additional websites, you don't have to create new accounts.

00;09;18;13 - 00;09;38;26
Unknown
You don't have to spin up resources and then keep track of something that lives on another provider. It's all there for you. Our goal is to create the most seamless experience possible for you to build and deploy your application, and that's why we have these offerings again. I met at Replit in Developer Relations. This has been an introduction to the different types of storage you can use on Replit.

00;09;38;29 - 00;09;40;25
Unknown
Until next time, peace.

